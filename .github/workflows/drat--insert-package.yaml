# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NOTE 1:
# This script automatically detects the repository in which it is run.
# No edits are needed except in the "Install Dependencies" section where
# one may need to install additional packages according to the needs.

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NOTE 2:
# Each "- name:" task below starts from the same directory, which is:
# /home/runner/work/${{ REPOSITORY_NAME }}/${{ REPOSITORY_NAME }}
# e.g.:
# /home/runner/work/hyperSpec/hyperSpec
# Each task is run in its own shell starting from this directory.
# This means you have to navigate to the desired directory for each task.

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NOTE 3:
# If more than one branch given to trigger the workflow,
# one may stomp on the other during deployment, so use only one branch.

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

on:
  push:
    branches:
      - master
      - main

name: Compile Personal drat

jobs:
  drat:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (R-${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
        - {os: ubuntu-18.04,   r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}
        - {os: ubuntu-20.04,   r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
        - {os: windows-latest, r: 'release'}
        - {os: macOS-latest,   r: 'release'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      REPO: ${{ github.event.repository.name }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Query dependencies
        run: |
          install.packages('remotes')
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

#      - name: Install system dependencies
#        if: runner.os == 'Linux'
#        run: |
#          while read -r cmd
#          do
#            eval sudo $cmd
#          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "18.04"))')

      - name: Install dependencies
        shell: Rscript {0}
        run: |
          remotes::install_cran(c("roxygen2", "devtools"))
          remotes::install_github(c(
            "dipterix/drat-1",
            "dipterix/dipsaus",
            "dipterix/threeBrain",
            "beauchamplab/raveio",
            "dipterix/rutabaga@develop", 
            "beauchamplab/rave",
            "dipterix/ravebase",
            "beauchamplab/ravebuiltins@migrate2"
          ))

      - name: Download source packages
        shell: Rscript {0}
        run: |
          repo_dname = ""
          source("./tmp/prepare.R")

# Above are the steps to build package
# Below are the steps to deploy to pkg-repo
      - name: Configure git
        # The following configure step is from
        # https://stackoverflow.com/a/60548651/633251
        env:
          TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        run: |
          git config --global url."https://${TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
          git config --global user.email "dipterix.wang@gmail.com"
          git config --global user.name "Deploy Bot"

      - name: Drat -- clone dipterix/drat
        if: success()
        run: |
          rm -rf drat-tmp
          git clone https://github.com/dipterix/drat.git drat-tmp
          cd drat-tmp
          git checkout gh-pages

      - name: Drat -- insert
        if: success()
        shell: Rscript {0}
        run: |
          repo_dname = ""
          fs <- list.files(file.path(".", repo_dname), all.files = FALSE, full.names = FALSE, recursive = FALSE, include.dirs = TRUE, no.. = FALSE)
          fs <- fs[!fs %in% c(".git", ".github", ".Rproj.user", "tmp", "drat-tmp", "drat.Rproj")]
          if( dipsaus::get_os() != 'windows' ){
            fs <- fs[!fs %in% c('src')]
          }
          root <- file.path("./drat-tmp", repo_dname)
          dir.create(root, recursive = TRUE, showWarnings = FALSE)
          fs <- file.path(root, fs)
          for(f in fs){
             if(dir.exists(f)){
               file.copy(f, ".", overwrite = TRUE, recursive = TRUE)
             } else {
               file.copy(f, basename(f), overwrite = TRUE)
             }
          }

      - name: Drat -- commit and push
        if: success()
        run: |
          cd drat-tmp
          git add *
          # .tar.gz files are globally blocked (git ignored) by git,
          # must add manually and force it
          git add -f *.tar.gz
          git commit -m "Automated deploy from ${REPO}"
          git push origin gh-pages
