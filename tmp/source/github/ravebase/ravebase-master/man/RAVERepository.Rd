% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-repository.R
\name{RAVERepository}
\alias{RAVERepository}
\title{Definition for data repository class}
\description{
Do not create instance directly, use
\code{\link{loaded_rave_repository}} instead.
}
\seealso{
\code{\link{rave_brain2}}, \code{\link[threeBrain]{freesurfer_brain2}}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{subject}}{\code{\link{RAVESubject}} instance}

\item{\code{electrodes}}{electrodes loaded}

\item{\code{ignored_electrodes}}{electrodes ignored}

\item{\code{reference_table}}{reference table}

\item{\code{time_range}}{seconds before and after trial onset}

\item{\code{reference_name}}{name of reference table}

\item{\code{epoch}}{\code{\link{RAVEEpoch}} instance}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{signature}}{unique signature for repository; if subject ID,
reference table, epoch table, and time range are the same, signatures
will be the same}

\item{\code{preload_electrodes}}{get or set default electrodes to be loaded,
mainly used internally by \code{link{rave_load}}.}

\item{\code{project}}{\code{\link{RAVEProject}} instance}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{RAVERepository$new()}}
\item \href{#method-load_brain}{\code{RAVERepository$load_brain()}}
\item \href{#method-.validate_cache}{\code{RAVERepository$.validate_cache()}}
\item \href{#method-.signature_yaml}{\code{RAVERepository$.signature_yaml()}}
\item \href{#method-epoch_continuous_signals}{\code{RAVERepository$epoch_continuous_signals()}}
\item \href{#method-clear_cache}{\code{RAVERepository$clear_cache()}}
\item \href{#method-clear_memory}{\code{RAVERepository$clear_memory()}}
\item \href{#method-get_meta}{\code{RAVERepository$get_meta()}}
\item \href{#method-get_valid_electrodes}{\code{RAVERepository$get_valid_electrodes()}}
\item \href{#method-get_loaded_electrodes}{\code{RAVERepository$get_loaded_electrodes()}}
\item \href{#method-get_power}{\code{RAVERepository$get_power()}}
\item \href{#method-get_phase}{\code{RAVERepository$get_phase()}}
\item \href{#method-get_voltage}{\code{RAVERepository$get_voltage()}}
\item \href{#method-get_sample_rate}{\code{RAVERepository$get_sample_rate()}}
\item \href{#method-get_preload_info}{\code{RAVERepository$get_preload_info()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
constructor
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVERepository$new(subject, reference, epoch, before_onset, after_onset)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{subject}}{character or \code{\link{RAVESubject}} instance}

\item{\code{reference}}{reference name}

\item{\code{epoch}}{epoch name}

\item{\code{before_onset}}{seconds to be loaded before trial onset}

\item{\code{after_onset}}{seconds to be loaded after trial onset}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-load_brain"></a>}}
\if{latex}{\out{\hypertarget{method-load_brain}{}}}
\subsection{Method \code{load_brain()}}{
load 3D brain instance
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVERepository$load_brain(
  surfaces = "pial",
  use_141 = TRUE,
  recache = FALSE,
  clean_before_cache = FALSE,
  compute_template = FALSE,
  usetemplateifmissing = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{surfaces}}{surface types such as \code{'pial'}, \code{'white'},
\code{'smoothwm'}, \code{'sphere'}, etc.}

\item{\code{use_141}}{whether to use 'SUMA' 141 standard brain if possible}

\item{\code{recache}}{whether to force re-calculate cache data}

\item{\code{clean_before_cache}}{whether to clear data before caching}

\item{\code{compute_template}}{whether to compute template vertices}

\item{\code{usetemplateifmissing}}{whether to use template brain if surfaces
are missing, default is false}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{threeBrain} brain instance
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-.validate_cache"></a>}}
\if{latex}{\out{\hypertarget{method-.validate_cache}{}}}
\subsection{Method \code{.validate_cache()}}{
validate whether cached data is valid and consistent, i.e.
the cached data is reliable, otherwise the cached data is no longer
useful.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVERepository$.validate_cache(dtype = c("power", "phase", "voltage"))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dtype}}{data type to check, choices are 'power', 'phase', 'voltage'}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
If there is no valid electrode, then returns \code{NULL};
otherwise returns a list with the following items:
\describe{
\item{path}{path where the cached data should be stored}
\item{exist}{whether path exists as a directory}
\item{consistent}{whether cached data is consistent}
\item{dim}{dimension of the array}
\item{dimnames}{dimension names of the array}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-.signature_yaml"></a>}}
\if{latex}{\out{\hypertarget{method-.signature_yaml}{}}}
\subsection{Method \code{.signature_yaml()}}{
internally used to save signature to cached arrays
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVERepository$.signature_yaml(path)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{path to the cached array}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-epoch_continuous_signals"></a>}}
\if{latex}{\out{\hypertarget{method-epoch_continuous_signals}{}}}
\subsection{Method \code{epoch_continuous_signals()}}{
epoch power, phase, or voltage data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVERepository$epoch_continuous_signals(
  electrodes = NULL,
  dtype = c("power", "phase", "voltage")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{electrodes}}{electrodes to epoch}

\item{\code{dtype}}{data type, choices are 'power', 'phase', and 'voltage'}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clear_cache"></a>}}
\if{latex}{\out{\hypertarget{method-clear_cache}{}}}
\subsection{Method \code{clear_cache()}}{
call \code{clear_cache} for each electrodes loaded
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVERepository$clear_cache(dtypes = c("power", "phase", "voltage"))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dtypes}}{data types to clear}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clear_memory"></a>}}
\if{latex}{\out{\hypertarget{method-clear_memory}{}}}
\subsection{Method \code{clear_memory()}}{
call \code{clear_memory} for each electrodes loaded
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVERepository$clear_memory()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_meta"></a>}}
\if{latex}{\out{\hypertarget{method-get_meta}{}}}
\subsection{Method \code{get_meta()}}{
get meta data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVERepository$get_meta(
  name = c("electrodes", "frequencies", "time_points", "trials")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{meta type name, choices are \code{'electrode'},
\code{'frequencies'}, \code{'time_points'}, \code{'trials'}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Data frames of corresponding meta data
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_valid_electrodes"></a>}}
\if{latex}{\out{\hypertarget{method-get_valid_electrodes}{}}}
\subsection{Method \code{get_valid_electrodes()}}{
get all valid electrode numbers for current subject
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVERepository$get_valid_electrodes(electrodes)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{electrodes}}{integers to filter, if missing then default to all
possible electrodes}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Valid electrode numbers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_loaded_electrodes"></a>}}
\if{latex}{\out{\hypertarget{method-get_loaded_electrodes}{}}}
\subsection{Method \code{get_loaded_electrodes()}}{
get electrode numbers to be loaded
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVERepository$get_loaded_electrodes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_power"></a>}}
\if{latex}{\out{\hypertarget{method-get_power}{}}}
\subsection{Method \code{get_power()}}{
epoch power data of pre-specified electrodes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVERepository$get_power(.old = FALSE, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{.old}}{whether use 'RAVE' 1.0 format}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
if \code{.old} is true, return \code{\link[raveio]{ECoGTensor}}
instance, otherwise return \code{\link[lazyarray]{lazyarray}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_phase"></a>}}
\if{latex}{\out{\hypertarget{method-get_phase}{}}}
\subsection{Method \code{get_phase()}}{
epoch phase data of pre-specified electrodes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVERepository$get_phase(.old = FALSE, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{.old}}{whether use 'RAVE' 1.0 format}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
if \code{.old} is true, return \code{\link[raveio]{ECoGTensor}}
instance, otherwise return \code{\link[lazyarray]{lazyarray}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_voltage"></a>}}
\if{latex}{\out{\hypertarget{method-get_voltage}{}}}
\subsection{Method \code{get_voltage()}}{
epoch voltage data of pre-specified electrodes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVERepository$get_voltage(.old = FALSE, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{.old}}{whether use 'RAVE' 1.0 format}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
if \code{.old} is true, return \code{\link[raveio]{Tensor}}
instance, otherwise return \code{\link[lazyarray]{lazyarray}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_sample_rate"></a>}}
\if{latex}{\out{\hypertarget{method-get_sample_rate}{}}}
\subsection{Method \code{get_sample_rate()}}{
get sampling frequency
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVERepository$get_sample_rate(
  type = c("ECoG", "LFP", "Spike", "EEG"),
  time_freq = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{electrode signal type, choices are \code{'ECoG'},
\code{'LFP'}, \code{'Spike'}, \code{'EEG'}}

\item{\code{time_freq}}{whether should return sample rates after time-frequency
decomposition (e.g. down-sampled rate after wavelet)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
if \code{time_freq} is true, return power or phase sample rate,
otherwise return voltage signal sample rate. If there is no such
electrode signal type, for example, \code{type='Spike'} but no spike
signals, then return \code{NA}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_preload_info"></a>}}
\if{latex}{\out{\hypertarget{method-get_preload_info}{}}}
\subsection{Method \code{get_preload_info()}}{
get information when creating the repository
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVERepository$get_preload_info()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list containing electrode to analyze, epoch and reference table
names, time range of the analysis, time index for power and phase,
wavelet frequencies and trial condition types.
}
}
}
